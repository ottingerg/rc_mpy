<!DOCTYPE html>
  <html >
  <body >
  <canvas id = "canvas_xy" width = "400" height = "400"
  style = "background-color:#333" >
  </canvas >
  <canvas id = "canvas_leveler" width = "60" height = "340"
  style = "position: absolute; top: 10; background-color:#333" >
  </canvas >
  <canvas id = "canvas_lights" width = "60" height = "60"
  style = "background-color:#333" >
  </canvas >
  <button id="view-fullscreen" width="200">Fullscreen</button>

<script >
var canvas_xy = document.getElementById ("canvas_xy");
var canvas_leveler = document.getElementById ("canvas_leveler");
var canvas_lights = document.getElementById ("canvas_lights");

var websocket = new WebSocket('ws://192.168.4.1:8082/');

var trans = new transmitter(websocket);
var ctr_xy = new controller (128, 128, "red", canvas_xy,function(x,y) {trans.update_move(x,y);});
var ctr_leveler = new controller (300, 80, "gray", canvas_leveler,function(x,y) {trans.update_leveler(x,y);});
var swi_lights = new toggle_switch( "green", canvas_lights,function(s) {trans.update_lights(s);});

function throttle (callback, limit) {
  var wait = false;
  return function () {
    if (!wait) {
      callback.apply(null, arguments);
      wait = true;
      setTimeout(function () {
        wait = false;
      }, limit);
    }
  }
}

function resizeCanvas() {
    canvas_xy.width = window.innerWidth * 0.8;
    canvas_xy.height = window.innerHeight * 1.1;
    canvas_leveler.width = window.innerWidth * 0.15;
    canvas_leveler.height = window.innerHeight * 0.9;
    canvas_lights.width = window.innerWidth * 0.15;
    canvas_lights.height = window.innerHeight * 0.2;
    ctr_leveler.resize(window.innerWidth * 0.15,window.innerWidth * 0.15);
    ctr_xy.resize(window.innerWidth * 0.2,window.innerWidth * 0.2);

    //canvs.width = window.innerWidth;
    //canvs.height = window.innerHeight;
}

var viewFullScreen = document.getElementById("view-fullscreen");
if (viewFullScreen) {
    viewFullScreen.addEventListener("click", function () {
        resizeCanvas();
        document.getElementById("view-fullscreen").style.visibility = 'hidden';
        var docElm = document.documentElement;
        if (docElm.requestFullscreen) {
            docElm.requestFullscreen();
        }
        else if (docElm.msRequestFullscreen) {
            docElm = document.body; //overwrite the element (for IE)
            docElm.msRequestFullscreen();
        }
        else if (docElm.mozRequestFullScreen) {
            docElm.mozRequestFullScreen();
        }
        else if (docElm.webkitRequestFullScreen) {
            docElm.webkitRequestFullScreen();
        }
    }, false);
}

websocket.onmessage = function(evt) { canvas_xy.getContext("2d").clearRect(0,0,50,20); canvas_xy.getContext("2d").fillText(evt.data,10,10); };
websocket.onclose = function(evt) { websocket = new WebSocket('ws://192.168.4.1:8082/'); }
websocket.onerror = function(evt) { websocket.close(); }
setInterval(function() {trans.send_updates();}, 20);
//setInterval(function() {swi_lights.toggle();}, 250);


ctr_xy.init();
ctr_leveler.init();

canvas_xy.addEventListener ("mousemove", function (event) { ctr_xy.moved (event); }, false);
canvas_xy.addEventListener ("touchmove", throttle(function (event) { ctr_xy.moved_t (event); },50), false);


canvas_xy.addEventListener ("mouseup", function (event) { ctr_xy.init(); }, false);
canvas_xy.addEventListener ("touchend", function (event) { ctr_xy.init(); }, false);

canvas_leveler.addEventListener ("mousemove", function (event) { ctr_leveler.moved (event); }, false);
canvas_leveler.addEventListener ("touchmove", throttle(function (event) { ctr_leveler.moved_t (event); },50), false);

canvas_lights.addEventListener ("click", function (event) { swi_lights.toggle(event); }, false);

function
toggle_switch (color,canvas, update_switch)
{
  this.color = color;
  this.canvas = canvas;
  this.state = false;
  this.update_switch = update_switch;

  this.toggle = function (event)
  {
    var ctx = this.canvas.getContext ("2d");

    if(this.state)
    {
      this.state = false;
      ctx.clearRect (0,0, this.canvas.width, this.canvas.height);
    } else {
      this.state = true;
      ctx.fillStyle = this.color;
      ctx.fillRect (0,0, this.canvas.width, this.canvas.height);
      ctx.fill();
    }

    this.update_switch(this.state);
  }
}

function
controller (width, height, color, canvas, update_xy)
{
  this.width = width;
  this.height = height;
  this.color = color;
  this.canvas = canvas;
  this.xold = 0;
  this.yold = 0;
  this.update_xy = update_xy;

  this.init = function() { this.update(this.canvas.width/2, this.canvas.height/2) };

  this.update = function (x, y)
  {
    var ctx = this.canvas.getContext ("2d");
    ctx.clearRect (this.xold - width / 2, this.yold - height / 2, width, height);

    if (x + width / 2 > this.canvas.width)
      x = this.canvas.width - width / 2;
    if (y + height / 2 > this.canvas.height)
      y = this.canvas.height - height / 2;
    if (x - width / 2 < 0)
      x = width / 2;
    if (y - height / 2 < 0)
      y = height / 2;

    this.xold = x;
    this.yold = y;


    this.update_xy(Math.round((x - this.canvas.width/2)*2/(this.canvas.width-width)*100),Math.round((y - this.canvas.height/2)*(-2)/(this.canvas.height-height)*100));

    ctx.fillStyle = this.color;
    ctx.fillRect (x - width / 2, y - height / 2, width, height);
    ctx.fill ();
  }

  this.moved = function (event)
  {
    if (!event.buttons && event.type != "click") return;
    var rect = this.canvas.getBoundingClientRect ();
    var x = event.clientX - rect.left;
    var y = event.clientY - rect.top;
    this.update (x, y);
  }
  this.moved_t = function (event)
  {
    //if (!event.buttons && event.type != "click") return;
    var rect = this.canvas.getBoundingClientRect ();
    var x = event.touches[0].clientX - rect.left;
    var y = event.touches[0].clientY - rect.top;
    this.update (x, y);
  }
  this.resize = function (x,y)
  {
    this.width = x;
    this.height = y;
  }
}

function transmitter(websocket)
{
  this.motor = 0;
  this.steering = 0;
  this.leveler = 0;
  this.lights = 0;
  this.o_motor = 0;
  this.o_steering = 0;
  this.o_leveler = 0;
  this.o_lights = 0;
  this.websocket = websocket;

  this.update_move = function(new_steering,new_motor) {
    this.motor = new_motor;
    this.steering = new_steering;
  }

  this.update_leveler = function(dummy,new_leveler) {
    this.leveler = new_leveler;
  }

  this.update_lights = function(new_lights) {
    this.lights = new_lights;
  }

  this.send_updates = function() {
    updatestr = ""
    if (this.o_motor != this.motor) {
      updatestr += ("motor "+this.motor+"\n");
      this.o_motor = this.motor;
    }
    if (this.o_steering != this.steering) {
      updatestr += ("steering "+this.steering+"\n");
      this.o_steering = this.steering;
    }
    if (this.o_leveler != this.leveler) {
      updatestr += ("leveler "+this.leveler+"\n");
      this.o_leveler = this.leveler;
    }
    if (this.o_lights != this.lights) {
      if(this.lights == true) {
        updatestr += ("lights 100\n");
      } else {
        updatestr += ("lights 0\n");
      }
      this.o_lights = this.lights;
    }
    if (updatestr != "")
      this.websocket.send(updatestr)
  }

}

</script > </body > </html >
